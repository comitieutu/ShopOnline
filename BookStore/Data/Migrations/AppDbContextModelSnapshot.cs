// <auto-generated />
using System;
using BookStore.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BookStore.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BookStore.Category", b =>
                {
                    b.Property<string>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(7);

                    b.Property<string>("CategoryDes")
                        .HasMaxLength(50);

                    b.Property<string>("CategoryName")
                        .HasMaxLength(20);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("date");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("date");

                    b.Property<byte[]>("Timestamp");

                    b.HasKey("CategoryId");

                    b.ToTable("Category");

                    b.HasData(
                        new { CategoryId = "C001", CategoryDes = "Tiểu thuyết nổi tiếng", CategoryName = "Tiểu thuyết" },
                        new { CategoryId = "C002", CategoryDes = "Tuyển tập truyện ngắn", CategoryName = "Truyện ngắn" }
                    );
                });

            modelBuilder.Entity("BookStore.Customer", b =>
                {
                    b.Property<string>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(7);

                    b.Property<string>("BankAccount")
                        .HasMaxLength(20);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("date");

                    b.Property<int>("CustomerType")
                        .HasMaxLength(10);

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("date");

                    b.Property<byte[]>("Timestamp");

                    b.HasKey("CustomerId");

                    b.ToTable("Customer");

                    b.HasData(
                        new { CustomerId = "Cust001", CustomerType = 0 },
                        new { CustomerId = "Cust002", CustomerType = 2 }
                    );
                });

            modelBuilder.Entity("BookStore.PersonInfo", b =>
                {
                    b.Property<string>("CustomerId")
                        .HasMaxLength(7);

                    b.Property<string>("Address")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("date");

                    b.Property<string>("City")
                        .HasMaxLength(50);

                    b.Property<string>("Country")
                        .HasMaxLength(50);

                    b.Property<bool?>("Deleted");

                    b.Property<string>("District")
                        .HasMaxLength(50);

                    b.Property<string>("Email")
                        .HasMaxLength(50);

                    b.Property<string>("FirstName")
                        .HasMaxLength(15);

                    b.Property<string>("Gender")
                        .HasMaxLength(5);

                    b.Property<string>("LastName")
                        .HasMaxLength(15);

                    b.Property<string>("Phone")
                        .HasMaxLength(18);

                    b.Property<string>("Street")
                        .HasMaxLength(50);

                    b.Property<byte[]>("Timestamp");

                    b.HasKey("CustomerId");

                    b.ToTable("PersonInfo");

                    b.HasData(
                        new { CustomerId = "Cust001", Email = "meomeo@gmail.com", FirstName = "Meo", LastName = "Meo", Phone = "0354464467" },
                        new { CustomerId = "Cust002", Email = "gaugau@gmail.com", FirstName = "Gau", LastName = "Gau", Phone = "094464467" }
                    );
                });

            modelBuilder.Entity("BookStore.Product", b =>
                {
                    b.Property<string>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(7);

                    b.Property<string>("CategoryId")
                        .HasMaxLength(7);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("date");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("date");

                    b.Property<string>("ProductDes")
                        .HasMaxLength(50);

                    b.Property<string>("ProductName")
                        .HasMaxLength(50);

                    b.Property<int?>("Quantity");

                    b.Property<byte[]>("Timestamp");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Product");

                    b.HasData(
                        new { ProductId = "P001", CategoryId = "C001", ProductDes = "Kinh điển", ProductName = "Cuốn theo chiều gió", Quantity = 5 },
                        new { ProductId = "P002", CategoryId = "C002", ProductDes = "Việt Nam", ProductName = "Mắt biếc", Quantity = 12 }
                    );
                });

            modelBuilder.Entity("BookStore.ProductDetail", b =>
                {
                    b.Property<string>("ProductId")
                        .HasMaxLength(7);

                    b.Property<string>("Comment")
                        .HasMaxLength(50);

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DesDetail")
                        .HasMaxLength(50);

                    b.Property<string>("ProductImage")
                        .HasMaxLength(50);

                    b.Property<byte[]>("Timestamp");

                    b.HasKey("ProductId");

                    b.ToTable("ProductDetail");
                });

            modelBuilder.Entity("BookStore.ReceiveProduct", b =>
                {
                    b.Property<string>("SaleOrderId")
                        .HasMaxLength(7);

                    b.Property<bool?>("Deleted");

                    b.Property<string>("ShipToAddress")
                        .HasMaxLength(50);

                    b.Property<string>("ShipToCity")
                        .HasMaxLength(50);

                    b.Property<string>("ShipToCountry")
                        .HasMaxLength(50);

                    b.Property<string>("ShipToDistrict")
                        .HasMaxLength(50);

                    b.Property<string>("ShipToName")
                        .HasMaxLength(30);

                    b.Property<string>("ShipToPhone")
                        .HasMaxLength(18);

                    b.Property<string>("ShipToStreet")
                        .HasMaxLength(50);

                    b.Property<byte[]>("Timestamp");

                    b.HasKey("SaleOrderId");

                    b.ToTable("ReceiveProduct");

                    b.HasData(
                        new { SaleOrderId = "SO001", ShipToName = "Ichi", ShipToPhone = "0888888888" },
                        new { SaleOrderId = "SO002", ShipToName = "Gau Gau", ShipToPhone = "094464467" }
                    );
                });

            modelBuilder.Entity("BookStore.SaleOrder", b =>
                {
                    b.Property<string>("SaleOrderId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(7);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("date");

                    b.Property<string>("CustomerId")
                        .HasMaxLength(7);

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("OrderDate")
                        .HasColumnType("date");

                    b.Property<string>("OrderStatus")
                        .HasMaxLength(20);

                    b.Property<DateTime?>("ShippedDate")
                        .HasColumnType("date");

                    b.Property<string>("ShipperId")
                        .HasMaxLength(7);

                    b.Property<byte[]>("Timestamp");

                    b.Property<double?>("TotalPrice");

                    b.HasKey("SaleOrderId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ShipperId");

                    b.ToTable("SaleOrder");

                    b.HasData(
                        new { SaleOrderId = "SO001", CustomerId = "Cust001", OrderDate = new DateTime(2018, 9, 30, 21, 45, 31, 134, DateTimeKind.Local), TotalPrice = 150000.0 },
                        new { SaleOrderId = "SO002", CustomerId = "Cust002", OrderDate = new DateTime(2018, 9, 30, 21, 45, 31, 135, DateTimeKind.Local), TotalPrice = 500000.0 }
                    );
                });

            modelBuilder.Entity("BookStore.SaleOrderDetail", b =>
                {
                    b.Property<string>("SaleOrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(7);

                    b.Property<bool?>("Deleted");

                    b.Property<int?>("Discount");

                    b.Property<string>("ProductId")
                        .HasMaxLength(7);

                    b.Property<int?>("Quantity");

                    b.Property<string>("SaleOrderId")
                        .HasMaxLength(7);

                    b.Property<byte[]>("Timestamp");

                    b.Property<double?>("UnitPrice");

                    b.HasKey("SaleOrderDetailId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SaleOrderId");

                    b.ToTable("SaleOrderDetail");

                    b.HasData(
                        new { SaleOrderDetailId = "SOD001", ProductId = "P001", Quantity = 1, SaleOrderId = "SO001", UnitPrice = 150000.0 },
                        new { SaleOrderDetailId = "SOD002", ProductId = "P002", Quantity = 2, SaleOrderId = "SO002", UnitPrice = 250000.0 }
                    );
                });

            modelBuilder.Entity("BookStore.Shipper", b =>
                {
                    b.Property<string>("ShipperId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(7);

                    b.Property<string>("Company")
                        .HasMaxLength(20);

                    b.Property<string>("ContactName")
                        .HasMaxLength(20);

                    b.Property<string>("ContactPhone")
                        .HasMaxLength(18);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("date");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("date");

                    b.Property<byte[]>("Timestamp");

                    b.HasKey("ShipperId");

                    b.ToTable("Shipper");

                    b.HasData(
                        new { ShipperId = "SP001", ContactName = "Anga", ContactPhone = "094123321" },
                        new { ShipperId = "SP002", ContactName = "Husky", ContactPhone = "037864457" }
                    );
                });

            modelBuilder.Entity("BookStore.PersonInfo", b =>
                {
                    b.HasOne("BookStore.Customer", "Customer")
                        .WithOne("PersonInfo")
                        .HasForeignKey("BookStore.PersonInfo", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BookStore.Product", b =>
                {
                    b.HasOne("BookStore.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId");
                });

            modelBuilder.Entity("BookStore.ProductDetail", b =>
                {
                    b.HasOne("BookStore.Product", "Product")
                        .WithOne("ProductDetail")
                        .HasForeignKey("BookStore.ProductDetail", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BookStore.ReceiveProduct", b =>
                {
                    b.HasOne("BookStore.SaleOrder", "SaleOrder")
                        .WithOne("ReceiveProduct")
                        .HasForeignKey("BookStore.ReceiveProduct", "SaleOrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BookStore.SaleOrder", b =>
                {
                    b.HasOne("BookStore.Customer", "Customer")
                        .WithMany("SaleOrders")
                        .HasForeignKey("CustomerId");

                    b.HasOne("BookStore.Shipper", "Shipper")
                        .WithMany("SaleOrders")
                        .HasForeignKey("ShipperId");
                });

            modelBuilder.Entity("BookStore.SaleOrderDetail", b =>
                {
                    b.HasOne("BookStore.Product", "Product")
                        .WithMany("SaleOrderDetails")
                        .HasForeignKey("ProductId");

                    b.HasOne("BookStore.SaleOrder", "SaleOrder")
                        .WithMany("SaleOrderDetails")
                        .HasForeignKey("SaleOrderId");
                });
#pragma warning restore 612, 618
        }
    }
}
