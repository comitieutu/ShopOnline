// <auto-generated />
using System;
using ComiShop.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ComiShop.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20181024135052_InitData")]
    partial class InitData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ComiShop.Category", b =>
                {
                    b.Property<string>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(7);

                    b.Property<string>("CategoryDes")
                        .HasMaxLength(50);

                    b.Property<string>("CategoryName")
                        .HasMaxLength(20);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("date");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("date");

                    b.Property<byte[]>("Timestamp");

                    b.HasKey("CategoryId");

                    b.ToTable("Category");

                    b.HasData(
                        new { CategoryId = "C001", CategoryDes = "Tiểu thuyết nổi tiếng", CategoryName = "Tiểu thuyết" },
                        new { CategoryId = "C002", CategoryDes = "Tuyển tập truyện ngắn", CategoryName = "Truyện ngắn" }
                    );
                });

            modelBuilder.Entity("ComiShop.Customer", b =>
                {
                    b.Property<string>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(7);

                    b.Property<string>("BankAccount")
                        .HasMaxLength(20);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("date");

                    b.Property<int>("CustomerType")
                        .HasMaxLength(10);

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("date");

                    b.Property<byte[]>("Timestamp");

                    b.HasKey("CustomerId");

                    b.ToTable("Customer");

                    b.HasData(
                        new { CustomerId = "Cust001", CustomerType = 0 },
                        new { CustomerId = "Cust002", CustomerType = 2 }
                    );
                });

            modelBuilder.Entity("ComiShop.Models.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new { Id = "a18be9c0-aa65-4af8-bd17-00bd9344e575", ConcurrencyStamp = "687c8e66-b56f-4b9f-937c-5d21f8525fbe", CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "admin", NormalizedName = "admin" }
                    );
                });

            modelBuilder.Entity("ComiShop.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new { Id = "a18be9c0-aa65-4af8-bd17-00bd9344e575", AccessFailedCount = 0, ConcurrencyStamp = "fe4aa8b3-a81a-48db-861b-e935c00d2dc7", Email = "admin@gmail.com", EmailConfirmed = false, LockoutEnabled = true, NormalizedEmail = "admin@gmail.com", NormalizedUserName = "admin@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEIqBPODFmwEphoxsA0p98pFxYel0/SuXx9TnQA4FX77vA7ITxM3xiYePLhmaFygM2w==", PhoneNumberConfirmed = false, SecurityStamp = "6981f064-cb8b-437e-b26b-e492fe713538", TwoFactorEnabled = false, UserName = "admin@gmail.com" }
                    );
                });

            modelBuilder.Entity("ComiShop.PersonInfo", b =>
                {
                    b.Property<string>("CustomerId")
                        .HasMaxLength(7);

                    b.Property<string>("Address")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("date");

                    b.Property<string>("City")
                        .HasMaxLength(50);

                    b.Property<string>("Country")
                        .HasMaxLength(50);

                    b.Property<bool?>("Deleted");

                    b.Property<string>("District")
                        .HasMaxLength(50);

                    b.Property<string>("Email")
                        .HasMaxLength(50);

                    b.Property<string>("FirstName")
                        .HasMaxLength(15);

                    b.Property<string>("Gender")
                        .HasMaxLength(5);

                    b.Property<string>("LastName")
                        .HasMaxLength(15);

                    b.Property<string>("Phone")
                        .HasMaxLength(18);

                    b.Property<string>("Street")
                        .HasMaxLength(50);

                    b.Property<byte[]>("Timestamp");

                    b.HasKey("CustomerId");

                    b.ToTable("PersonInfo");

                    b.HasData(
                        new { CustomerId = "Cust001", Email = "meomeo@gmail.com", FirstName = "Meo", LastName = "Meo", Phone = "0354464467" },
                        new { CustomerId = "Cust002", Email = "gaugau@gmail.com", FirstName = "Gau", LastName = "Gau", Phone = "094464467" }
                    );
                });

            modelBuilder.Entity("ComiShop.Product", b =>
                {
                    b.Property<string>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(7);

                    b.Property<string>("CategoryId")
                        .HasMaxLength(7);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("date");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("date");

                    b.Property<string>("ProductDes")
                        .HasMaxLength(50);

                    b.Property<string>("ProductName")
                        .HasMaxLength(50);

                    b.Property<int?>("Quantity");

                    b.Property<byte[]>("Timestamp");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Product");

                    b.HasData(
                        new { ProductId = "P001", CategoryId = "C001", ProductDes = "Kinh điển", ProductName = "Cuốn theo chiều gió", Quantity = 5 },
                        new { ProductId = "P002", CategoryId = "C002", ProductDes = "Việt Nam", ProductName = "Mắt biếc", Quantity = 12 }
                    );
                });

            modelBuilder.Entity("ComiShop.ProductDetail", b =>
                {
                    b.Property<string>("ProductId")
                        .HasMaxLength(7);

                    b.Property<string>("Comment")
                        .HasMaxLength(50);

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DesDetail")
                        .HasMaxLength(50);

                    b.Property<string>("ProductImage")
                        .HasMaxLength(50);

                    b.Property<byte[]>("Timestamp");

                    b.HasKey("ProductId");

                    b.ToTable("ProductDetail");
                });

            modelBuilder.Entity("ComiShop.ReceiveProduct", b =>
                {
                    b.Property<string>("SaleOrderId")
                        .HasMaxLength(7);

                    b.Property<bool?>("Deleted");

                    b.Property<string>("ShipToAddress")
                        .HasMaxLength(50);

                    b.Property<string>("ShipToCity")
                        .HasMaxLength(50);

                    b.Property<string>("ShipToCountry")
                        .HasMaxLength(50);

                    b.Property<string>("ShipToDistrict")
                        .HasMaxLength(50);

                    b.Property<string>("ShipToName")
                        .HasMaxLength(30);

                    b.Property<string>("ShipToPhone")
                        .HasMaxLength(18);

                    b.Property<string>("ShipToStreet")
                        .HasMaxLength(50);

                    b.Property<byte[]>("Timestamp");

                    b.HasKey("SaleOrderId");

                    b.ToTable("ReceiveProduct");

                    b.HasData(
                        new { SaleOrderId = "SO001", ShipToName = "Ichi", ShipToPhone = "0888888888" },
                        new { SaleOrderId = "SO002", ShipToName = "Gau Gau", ShipToPhone = "094464467" }
                    );
                });

            modelBuilder.Entity("ComiShop.SaleOrder", b =>
                {
                    b.Property<string>("SaleOrderId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(7);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("date");

                    b.Property<string>("CustomerId")
                        .HasMaxLength(7);

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("OrderDate")
                        .HasColumnType("date");

                    b.Property<string>("OrderStatus")
                        .HasMaxLength(20);

                    b.Property<DateTime?>("ShippedDate")
                        .HasColumnType("date");

                    b.Property<string>("ShipperId")
                        .HasMaxLength(7);

                    b.Property<byte[]>("Timestamp");

                    b.Property<double?>("TotalPrice");

                    b.HasKey("SaleOrderId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ShipperId");

                    b.ToTable("SaleOrder");

                    b.HasData(
                        new { SaleOrderId = "SO001", CustomerId = "Cust001", OrderDate = new DateTime(2018, 10, 24, 20, 50, 52, 345, DateTimeKind.Local), TotalPrice = 150000.0 },
                        new { SaleOrderId = "SO002", CustomerId = "Cust002", OrderDate = new DateTime(2018, 10, 24, 20, 50, 52, 346, DateTimeKind.Local), TotalPrice = 500000.0 }
                    );
                });

            modelBuilder.Entity("ComiShop.SaleOrderDetail", b =>
                {
                    b.Property<string>("SaleOrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(7);

                    b.Property<bool?>("Deleted");

                    b.Property<int?>("Discount");

                    b.Property<string>("ProductId")
                        .HasMaxLength(7);

                    b.Property<int?>("Quantity");

                    b.Property<string>("SaleOrderId")
                        .HasMaxLength(7);

                    b.Property<byte[]>("Timestamp");

                    b.Property<double?>("UnitPrice");

                    b.HasKey("SaleOrderDetailId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SaleOrderId");

                    b.ToTable("SaleOrderDetail");

                    b.HasData(
                        new { SaleOrderDetailId = "SOD001", ProductId = "P001", Quantity = 1, SaleOrderId = "SO001", UnitPrice = 150000.0 },
                        new { SaleOrderDetailId = "SOD002", ProductId = "P002", Quantity = 2, SaleOrderId = "SO002", UnitPrice = 250000.0 }
                    );
                });

            modelBuilder.Entity("ComiShop.Shipper", b =>
                {
                    b.Property<string>("ShipperId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(7);

                    b.Property<string>("Company")
                        .HasMaxLength(20);

                    b.Property<string>("ContactName")
                        .HasMaxLength(20);

                    b.Property<string>("ContactPhone")
                        .HasMaxLength(18);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("date");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("date");

                    b.Property<byte[]>("Timestamp");

                    b.HasKey("ShipperId");

                    b.ToTable("Shipper");

                    b.HasData(
                        new { ShipperId = "SP001", ContactName = "Anga", ContactPhone = "094123321" },
                        new { ShipperId = "SP002", ContactName = "Husky", ContactPhone = "037864457" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new { UserId = "a18be9c0-aa65-4af8-bd17-00bd9344e575", RoleId = "a18be9c0-aa65-4af8-bd17-00bd9344e575" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ComiShop.PersonInfo", b =>
                {
                    b.HasOne("ComiShop.Customer", "Customer")
                        .WithOne("PersonInfo")
                        .HasForeignKey("ComiShop.PersonInfo", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ComiShop.Product", b =>
                {
                    b.HasOne("ComiShop.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId");
                });

            modelBuilder.Entity("ComiShop.ProductDetail", b =>
                {
                    b.HasOne("ComiShop.Product", "Product")
                        .WithOne("ProductDetail")
                        .HasForeignKey("ComiShop.ProductDetail", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ComiShop.ReceiveProduct", b =>
                {
                    b.HasOne("ComiShop.SaleOrder", "SaleOrder")
                        .WithOne("ReceiveProduct")
                        .HasForeignKey("ComiShop.ReceiveProduct", "SaleOrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ComiShop.SaleOrder", b =>
                {
                    b.HasOne("ComiShop.Customer", "Customer")
                        .WithMany("SaleOrders")
                        .HasForeignKey("CustomerId");

                    b.HasOne("ComiShop.Shipper", "Shipper")
                        .WithMany("SaleOrders")
                        .HasForeignKey("ShipperId");
                });

            modelBuilder.Entity("ComiShop.SaleOrderDetail", b =>
                {
                    b.HasOne("ComiShop.Product", "Product")
                        .WithMany("SaleOrderDetails")
                        .HasForeignKey("ProductId");

                    b.HasOne("ComiShop.SaleOrder", "SaleOrder")
                        .WithMany("SaleOrderDetails")
                        .HasForeignKey("SaleOrderId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("ComiShop.Models.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ComiShop.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ComiShop.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("ComiShop.Models.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ComiShop.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ComiShop.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
