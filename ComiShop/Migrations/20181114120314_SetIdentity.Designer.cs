// <auto-generated />
using System;
using ComiShop.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ComiShop.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20181114120314_SetIdentity")]
    partial class SetIdentity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ComiShop.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryDes")
                        .HasMaxLength(50);

                    b.Property<string>("CategoryName")
                        .HasMaxLength(20);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<Guid>("UniqueId");

                    b.HasKey("Id");

                    b.ToTable("Category");

                    b.HasData(
                        new { Id = 1, CategoryDes = "Tiểu thuyết nổi tiếng", CategoryName = "Sách", CreatedDate = new DateTime(2018, 11, 14, 19, 3, 13, 759, DateTimeKind.Local), ModifiedDate = new DateTime(2018, 11, 14, 19, 3, 13, 759, DateTimeKind.Local), UniqueId = new Guid("c1f2f2e2-3cd1-4a97-bbe0-556a9b064cb4") },
                        new { Id = 2, CategoryDes = "Quần áo", CategoryName = "Quần áo", CreatedDate = new DateTime(2018, 11, 14, 19, 3, 13, 760, DateTimeKind.Local), ModifiedDate = new DateTime(2018, 11, 14, 19, 3, 13, 760, DateTimeKind.Local), UniqueId = new Guid("a98c8a48-fefa-4a83-8d7b-10b69079f736") }
                    );
                });

            modelBuilder.Entity("ComiShop.Data.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId");

                    b.Property<string>("Context");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int>("ProductId");

                    b.Property<Guid>("UniqueId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ProductId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("ComiShop.Models.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new { Id = "a18be9c0-aa65-4af8-bd17-00bd9344e575", ConcurrencyStamp = "12536547-4dc6-465b-bd46-ce8ab5bb8647", CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "admin", NormalizedName = "admin" }
                    );
                });

            modelBuilder.Entity("ComiShop.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("BankAccount")
                        .HasMaxLength(20);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<int>("CustomerType")
                        .HasMaxLength(10);

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<int?>("PersonInfoId");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PersonInfoId");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new { Id = "a18be9c0-aa65-4af8-bd17-00bd9344e575", AccessFailedCount = 0, ConcurrencyStamp = "c2819bab-a461-4df3-b57a-def6743da8f9", CustomerType = 0, Email = "admin@gmail.com", EmailConfirmed = false, LockoutEnabled = true, NormalizedEmail = "admin@gmail.com", NormalizedUserName = "admin@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAELcSBYWaPyfsfjyblKANOEqM7o5b8CajIurfLpEmm1deAeDpO4xHDplXaDlGylUnOg==", PhoneNumberConfirmed = false, SecurityStamp = "a6d45a94-8a51-4e74-a0e1-2b9275e1c402", TwoFactorEnabled = false, UserName = "admin@gmail.com" }
                    );
                });

            modelBuilder.Entity("ComiShop.PersonInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("date");

                    b.Property<string>("City")
                        .HasMaxLength(50);

                    b.Property<string>("Country")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("District")
                        .HasMaxLength(50);

                    b.Property<string>("FirstName")
                        .HasMaxLength(15);

                    b.Property<string>("Gender")
                        .HasMaxLength(5);

                    b.Property<string>("LastName")
                        .HasMaxLength(15);

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Street")
                        .HasMaxLength(50);

                    b.Property<Guid>("UniqueId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.ToTable("PersonInfo");

                    b.HasData(
                        new { Id = 1, CreatedDate = new DateTime(2018, 11, 14, 19, 3, 13, 760, DateTimeKind.Local), FirstName = "Meo", LastName = "Meo", ModifiedDate = new DateTime(2018, 11, 14, 19, 3, 13, 760, DateTimeKind.Local), UniqueId = new Guid("e91ff8a9-81a6-489d-87f9-b04cfbb5f26e"), UserId = "a18be9c0-aa65-4af8-bd17-00bd9344e575" }
                    );
                });

            modelBuilder.Entity("ComiShop.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DesDetail")
                        .HasMaxLength(50);

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("ProductDes")
                        .HasMaxLength(50);

                    b.Property<string>("ProductName")
                        .HasMaxLength(50);

                    b.Property<int?>("Quantity");

                    b.Property<Guid>("UniqueId");

                    b.Property<double?>("UnitPrice");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Product");

                    b.HasData(
                        new { Id = 1, CategoryId = 1, CreatedDate = new DateTime(2018, 11, 14, 19, 3, 13, 760, DateTimeKind.Local), ModifiedDate = new DateTime(2018, 11, 14, 19, 3, 13, 760, DateTimeKind.Local), ProductDes = "Kinh điển", ProductName = "Cuốn theo chiều gió", Quantity = 5, UniqueId = new Guid("43731edb-984a-4b5d-bc42-f85364654464"), UnitPrice = 50.0 },
                        new { Id = 2, CategoryId = 1, CreatedDate = new DateTime(2018, 11, 14, 19, 3, 13, 760, DateTimeKind.Local), ModifiedDate = new DateTime(2018, 11, 14, 19, 3, 13, 760, DateTimeKind.Local), ProductDes = "Việt Nam", ProductName = "Mắt biếc", Quantity = 12, UniqueId = new Guid("58c71da6-a9dc-4d88-9314-09fbdc91222f"), UnitPrice = 60.0 },
                        new { Id = 3, CategoryId = 2, CreatedDate = new DateTime(2018, 11, 14, 19, 3, 13, 760, DateTimeKind.Local), ModifiedDate = new DateTime(2018, 11, 14, 19, 3, 13, 760, DateTimeKind.Local), ProductDes = "Việt Nam", ProductName = "Sơ mi", Quantity = 11, UniqueId = new Guid("58cb18ea-bdb0-4bf1-879f-199c0aac51a0"), UnitPrice = 60.0 },
                        new { Id = 4, CategoryId = 2, CreatedDate = new DateTime(2018, 11, 14, 19, 3, 13, 760, DateTimeKind.Local), ModifiedDate = new DateTime(2018, 11, 14, 19, 3, 13, 760, DateTimeKind.Local), ProductDes = "Việt Nam", ProductName = "Đầm", Quantity = 22, UniqueId = new Guid("ca4f8a87-ec35-4c41-ae0f-679ccaf610cc"), UnitPrice = 70.0 }
                    );
                });

            modelBuilder.Entity("ComiShop.ProductDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int>("ProductId");

                    b.Property<string>("ProductImage")
                        .HasMaxLength(50);

                    b.Property<Guid>("UniqueId");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductDetail");

                    b.HasData(
                        new { Id = 1, CreatedDate = new DateTime(2018, 11, 14, 19, 3, 13, 760, DateTimeKind.Local), ModifiedDate = new DateTime(2018, 11, 14, 19, 3, 13, 760, DateTimeKind.Local), ProductId = 1, ProductImage = "i1.jpg", UniqueId = new Guid("24623e17-9ab6-4d0f-b905-5d79debbe306") },
                        new { Id = 2, CreatedDate = new DateTime(2018, 11, 14, 19, 3, 13, 760, DateTimeKind.Local), ModifiedDate = new DateTime(2018, 11, 14, 19, 3, 13, 760, DateTimeKind.Local), ProductId = 2, ProductImage = "i10.jpg", UniqueId = new Guid("2f1bb8be-db28-44bb-b766-8105e09c92ca") },
                        new { Id = 3, CreatedDate = new DateTime(2018, 11, 14, 19, 3, 13, 760, DateTimeKind.Local), ModifiedDate = new DateTime(2018, 11, 14, 19, 3, 13, 760, DateTimeKind.Local), ProductId = 3, ProductImage = "i12.jpg", UniqueId = new Guid("8d993c1e-0786-4bc3-b367-31f58efa3b8c") },
                        new { Id = 4, CreatedDate = new DateTime(2018, 11, 14, 19, 3, 13, 760, DateTimeKind.Local), ModifiedDate = new DateTime(2018, 11, 14, 19, 3, 13, 760, DateTimeKind.Local), ProductId = 4, ProductImage = "i11.jpg", UniqueId = new Guid("282aff3d-1dab-4a8b-ae78-60610f2ee5d4") }
                    );
                });

            modelBuilder.Entity("ComiShop.ReceiveProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int>("SaleId");

                    b.Property<string>("ShipToAddress")
                        .HasMaxLength(50);

                    b.Property<string>("ShipToCity")
                        .HasMaxLength(50);

                    b.Property<string>("ShipToCountry")
                        .HasMaxLength(50);

                    b.Property<string>("ShipToDistrict")
                        .HasMaxLength(50);

                    b.Property<string>("ShipToName")
                        .HasMaxLength(30);

                    b.Property<string>("ShipToPhone")
                        .HasMaxLength(18);

                    b.Property<string>("ShipToStreet")
                        .HasMaxLength(50);

                    b.Property<Guid>("UniqueId");

                    b.HasKey("Id");

                    b.ToTable("ReceiveProduct");

                    b.HasData(
                        new { Id = 1, CreatedDate = new DateTime(2018, 11, 14, 19, 3, 13, 761, DateTimeKind.Local), ModifiedDate = new DateTime(2018, 11, 14, 19, 3, 13, 761, DateTimeKind.Local), SaleId = 1, ShipToName = "Ichi", ShipToPhone = "0888888888", UniqueId = new Guid("61a8c7c4-b922-42de-bf99-542b25c10717") },
                        new { Id = 2, CreatedDate = new DateTime(2018, 11, 14, 19, 3, 13, 761, DateTimeKind.Local), ModifiedDate = new DateTime(2018, 11, 14, 19, 3, 13, 761, DateTimeKind.Local), SaleId = 2, ShipToName = "Gau Gau", ShipToPhone = "094464467", UniqueId = new Guid("624433cd-c21e-4ac6-b00f-0a9111837585") }
                    );
                });

            modelBuilder.Entity("ComiShop.SaleOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("OrderStatus")
                        .HasMaxLength(20);

                    b.Property<int?>("ReceiveProductId");

                    b.Property<DateTime?>("ShippedDate")
                        .HasColumnType("date");

                    b.Property<int>("ShipperId");

                    b.Property<double?>("TotalPrice");

                    b.Property<Guid>("UniqueId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ReceiveProductId");

                    b.HasIndex("ShipperId");

                    b.ToTable("SaleOrder");

                    b.HasData(
                        new { Id = 1, CreatedDate = new DateTime(2018, 11, 14, 19, 3, 13, 761, DateTimeKind.Local), ModifiedDate = new DateTime(2018, 11, 14, 19, 3, 13, 761, DateTimeKind.Local), ShipperId = 1, TotalPrice = 50.0, UniqueId = new Guid("cdeedf70-db7e-490e-a078-94b6e7a8063f"), UserId = "a18be9c0-aa65-4af8-bd17-00bd9344e575" },
                        new { Id = 2, CreatedDate = new DateTime(2018, 11, 14, 19, 3, 13, 761, DateTimeKind.Local), ModifiedDate = new DateTime(2018, 11, 14, 19, 3, 13, 761, DateTimeKind.Local), ShipperId = 1, TotalPrice = 120.0, UniqueId = new Guid("1b58d27c-289c-4eb9-addd-fe266e1342e7"), UserId = "a18be9c0-aa65-4af8-bd17-00bd9344e575" }
                    );
                });

            modelBuilder.Entity("ComiShop.SaleOrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool?>("Deleted");

                    b.Property<int?>("Discount");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int>("ProductId");

                    b.Property<int?>("Quantity");

                    b.Property<int>("SaleOrderId");

                    b.Property<Guid>("UniqueId");

                    b.Property<double?>("UnitPrice");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SaleOrderId");

                    b.ToTable("SaleOrderDetail");

                    b.HasData(
                        new { Id = 1, CreatedDate = new DateTime(2018, 11, 14, 19, 3, 13, 761, DateTimeKind.Local), ModifiedDate = new DateTime(2018, 11, 14, 19, 3, 13, 761, DateTimeKind.Local), ProductId = 1, Quantity = 1, SaleOrderId = 1, UniqueId = new Guid("66e17bf2-dd00-4267-bafa-65ec6de1cbad"), UnitPrice = 50.0 },
                        new { Id = 2, CreatedDate = new DateTime(2018, 11, 14, 19, 3, 13, 761, DateTimeKind.Local), ModifiedDate = new DateTime(2018, 11, 14, 19, 3, 13, 761, DateTimeKind.Local), ProductId = 3, Quantity = 2, SaleOrderId = 2, UniqueId = new Guid("b1fd3d34-8b21-4945-82cd-321db9debd5c"), UnitPrice = 60.0 }
                    );
                });

            modelBuilder.Entity("ComiShop.Shipper", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Company")
                        .HasMaxLength(20);

                    b.Property<string>("ContactName")
                        .HasMaxLength(20);

                    b.Property<string>("ContactPhone")
                        .HasMaxLength(18);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<Guid>("UniqueId");

                    b.HasKey("Id");

                    b.ToTable("Shipper");

                    b.HasData(
                        new { Id = 1, ContactName = "Anga", ContactPhone = "094123321", CreatedDate = new DateTime(2018, 11, 14, 19, 3, 13, 760, DateTimeKind.Local), ModifiedDate = new DateTime(2018, 11, 14, 19, 3, 13, 760, DateTimeKind.Local), UniqueId = new Guid("1b95c2c0-02c7-4659-b21f-d3dc5248f5da") },
                        new { Id = 2, ContactName = "Husky", ContactPhone = "037864457", CreatedDate = new DateTime(2018, 11, 14, 19, 3, 13, 761, DateTimeKind.Local), ModifiedDate = new DateTime(2018, 11, 14, 19, 3, 13, 761, DateTimeKind.Local), UniqueId = new Guid("ddf0c24e-fae9-4abe-8263-ff0138939ccc") }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new { UserId = "a18be9c0-aa65-4af8-bd17-00bd9344e575", RoleId = "a18be9c0-aa65-4af8-bd17-00bd9344e575" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ComiShop.Data.Entities.Comment", b =>
                {
                    b.HasOne("ComiShop.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Comments")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("ComiShop.Product", "Product")
                        .WithMany("Comments")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ComiShop.Models.ApplicationUser", b =>
                {
                    b.HasOne("ComiShop.PersonInfo", "PersonInfo")
                        .WithMany()
                        .HasForeignKey("PersonInfoId");
                });

            modelBuilder.Entity("ComiShop.Product", b =>
                {
                    b.HasOne("ComiShop.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ComiShop.ProductDetail", b =>
                {
                    b.HasOne("ComiShop.Product", "Product")
                        .WithMany("ProductDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ComiShop.SaleOrder", b =>
                {
                    b.HasOne("ComiShop.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("SaleOrders")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("ComiShop.ReceiveProduct", "ReceiveProduct")
                        .WithMany()
                        .HasForeignKey("ReceiveProductId");

                    b.HasOne("ComiShop.Shipper", "Shipper")
                        .WithMany("SaleOrders")
                        .HasForeignKey("ShipperId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ComiShop.SaleOrderDetail", b =>
                {
                    b.HasOne("ComiShop.Product", "Product")
                        .WithMany("SaleOrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ComiShop.SaleOrder", "SaleOrder")
                        .WithMany("SaleOrderDetails")
                        .HasForeignKey("SaleOrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("ComiShop.Models.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ComiShop.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ComiShop.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("ComiShop.Models.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ComiShop.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ComiShop.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
