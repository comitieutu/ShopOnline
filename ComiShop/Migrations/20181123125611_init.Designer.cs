// <auto-generated />
using System;
using ComiShop.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ComiShop.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20181123125611_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ComiShop.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryDes");

                    b.Property<string>("CategoryName");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<Guid>("UniqueId");

                    b.HasKey("Id");

                    b.ToTable("Category");

                    b.HasData(
                        new { Id = 1, CategoryDes = "Tiểu thuyết nổi tiếng", CategoryName = "Sách", CreatedDate = new DateTime(2018, 11, 23, 19, 56, 11, 481, DateTimeKind.Local), Deleted = false, ModifiedDate = new DateTime(2018, 11, 23, 19, 56, 11, 481, DateTimeKind.Local), UniqueId = new Guid("6a0ceac3-2cf7-4c3e-8fdd-188693a376c6") },
                        new { Id = 2, CategoryDes = "Quần áo", CategoryName = "Quần áo", CreatedDate = new DateTime(2018, 11, 23, 19, 56, 11, 482, DateTimeKind.Local), Deleted = false, ModifiedDate = new DateTime(2018, 11, 23, 19, 56, 11, 482, DateTimeKind.Local), UniqueId = new Guid("be1723b9-6d3f-44b9-a4cb-791163b0d6f5") }
                    );
                });

            modelBuilder.Entity("ComiShop.Data.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId");

                    b.Property<string>("Context");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int>("ProductId");

                    b.Property<Guid>("UniqueId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ProductId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("ComiShop.Models.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new { Id = "a18be9c0-aa65-4af8-bd17-00bd9344e575", ConcurrencyStamp = "c6ac873b-2c3a-4266-9f49-04b267dafcff", CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "admin", NormalizedName = "admin" }
                    );
                });

            modelBuilder.Entity("ComiShop.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("BankAccount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new { Id = "a18be9c0-aa65-4af8-bd17-00bd9344e575", AccessFailedCount = 0, ConcurrencyStamp = "d6ff14e1-abbd-4efa-992a-b9907a806dac", Email = "admin@gmail.com", EmailConfirmed = false, LockoutEnabled = true, NormalizedEmail = "admin@gmail.com", NormalizedUserName = "admin@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEDfs/aZpqorr1zy1eNn7Ue65MAToaoSiJeUnECwrVYoKNQXgm2dbxsQuv0/CWlZ+Sg==", PhoneNumberConfirmed = false, SecurityStamp = "5d8eed50-fb9a-4ec4-8ec6-31aab910494e", TwoFactorEnabled = false, UserName = "admin@gmail.com" }
                    );
                });

            modelBuilder.Entity("ComiShop.PersonInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<DateTime?>("Birthday");

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("Deleted");

                    b.Property<string>("District");

                    b.Property<string>("FirstName");

                    b.Property<string>("Gender");

                    b.Property<string>("LastName");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Street");

                    b.Property<Guid>("UniqueId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("PersonInfo");

                    b.HasData(
                        new { Id = 1, CreatedDate = new DateTime(2018, 11, 23, 19, 56, 11, 482, DateTimeKind.Local), Deleted = false, FirstName = "Meo", LastName = "Meo", ModifiedDate = new DateTime(2018, 11, 23, 19, 56, 11, 482, DateTimeKind.Local), UniqueId = new Guid("61e2d0d8-f5e3-4f6e-8203-6cb1c7873a15"), UserId = "a18be9c0-aa65-4af8-bd17-00bd9344e575" }
                    );
                });

            modelBuilder.Entity("ComiShop.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("Deleted");

                    b.Property<string>("DesDetail");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("ProductDes");

                    b.Property<string>("ProductName");

                    b.Property<int>("Quantity");

                    b.Property<Guid>("UniqueId");

                    b.Property<double>("UnitPrice");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Product");

                    b.HasData(
                        new { Id = 1, CategoryId = 1, CreatedDate = new DateTime(2018, 11, 23, 19, 56, 11, 482, DateTimeKind.Local), Deleted = false, ModifiedDate = new DateTime(2018, 11, 23, 19, 56, 11, 482, DateTimeKind.Local), ProductDes = "Kinh điển", ProductName = "Cuốn theo chiều gió", Quantity = 5, UniqueId = new Guid("bc9e5508-85b4-4b5e-b616-dc5a9c4fe9e9"), UnitPrice = 50.0 },
                        new { Id = 2, CategoryId = 1, CreatedDate = new DateTime(2018, 11, 23, 19, 56, 11, 482, DateTimeKind.Local), Deleted = false, ModifiedDate = new DateTime(2018, 11, 23, 19, 56, 11, 482, DateTimeKind.Local), ProductDes = "Việt Nam", ProductName = "Mắt biếc", Quantity = 12, UniqueId = new Guid("ea20bc0b-39a9-4909-b6bc-7a1be5b9388f"), UnitPrice = 60.0 },
                        new { Id = 3, CategoryId = 2, CreatedDate = new DateTime(2018, 11, 23, 19, 56, 11, 482, DateTimeKind.Local), Deleted = false, ModifiedDate = new DateTime(2018, 11, 23, 19, 56, 11, 482, DateTimeKind.Local), ProductDes = "Việt Nam", ProductName = "Sơ mi", Quantity = 11, UniqueId = new Guid("bf9d578f-353e-4694-9e98-79448cdda0ec"), UnitPrice = 60.0 },
                        new { Id = 4, CategoryId = 2, CreatedDate = new DateTime(2018, 11, 23, 19, 56, 11, 482, DateTimeKind.Local), Deleted = false, ModifiedDate = new DateTime(2018, 11, 23, 19, 56, 11, 482, DateTimeKind.Local), ProductDes = "Việt Nam", ProductName = "Đầm", Quantity = 22, UniqueId = new Guid("0d9f44e6-7dcd-4f3f-9f24-453bb7c7073d"), UnitPrice = 70.0 }
                    );
                });

            modelBuilder.Entity("ComiShop.ProductDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int>("ProductId");

                    b.Property<string>("ProductImage");

                    b.Property<Guid>("UniqueId");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductDetail");

                    b.HasData(
                        new { Id = 1, CreatedDate = new DateTime(2018, 11, 23, 19, 56, 11, 482, DateTimeKind.Local), Deleted = false, ModifiedDate = new DateTime(2018, 11, 23, 19, 56, 11, 482, DateTimeKind.Local), ProductId = 1, ProductImage = "i1.jpg", UniqueId = new Guid("ff6b7bd5-dc98-4c8e-9979-a13fc12ab892") },
                        new { Id = 2, CreatedDate = new DateTime(2018, 11, 23, 19, 56, 11, 482, DateTimeKind.Local), Deleted = false, ModifiedDate = new DateTime(2018, 11, 23, 19, 56, 11, 482, DateTimeKind.Local), ProductId = 2, ProductImage = "i10.jpg", UniqueId = new Guid("7685e756-57b0-4100-9ac2-5cdcb95756d4") },
                        new { Id = 3, CreatedDate = new DateTime(2018, 11, 23, 19, 56, 11, 482, DateTimeKind.Local), Deleted = false, ModifiedDate = new DateTime(2018, 11, 23, 19, 56, 11, 482, DateTimeKind.Local), ProductId = 3, ProductImage = "i12.jpg", UniqueId = new Guid("9b30a87e-87f7-49b7-8175-d99a48a82fc7") },
                        new { Id = 4, CreatedDate = new DateTime(2018, 11, 23, 19, 56, 11, 482, DateTimeKind.Local), Deleted = false, ModifiedDate = new DateTime(2018, 11, 23, 19, 56, 11, 482, DateTimeKind.Local), ProductId = 4, ProductImage = "i11.jpg", UniqueId = new Guid("76e2e161-af38-41f8-aebc-7bf46a7d5dda") }
                    );
                });

            modelBuilder.Entity("ComiShop.ReceiveProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int>("SaleId");

                    b.Property<int?>("SaleOrderId");

                    b.Property<string>("ShipToAddress");

                    b.Property<string>("ShipToCity");

                    b.Property<string>("ShipToCountry");

                    b.Property<string>("ShipToDistrict");

                    b.Property<string>("ShipToName");

                    b.Property<string>("ShipToPhone");

                    b.Property<string>("ShipToStreet");

                    b.Property<Guid>("UniqueId");

                    b.HasKey("Id");

                    b.HasIndex("SaleOrderId");

                    b.ToTable("ReceiveProduct");

                    b.HasData(
                        new { Id = 1, CreatedDate = new DateTime(2018, 11, 23, 19, 56, 11, 483, DateTimeKind.Local), Deleted = false, ModifiedDate = new DateTime(2018, 11, 23, 19, 56, 11, 483, DateTimeKind.Local), SaleId = 1, ShipToName = "Ichi", ShipToPhone = "0888888888", UniqueId = new Guid("46c1b10c-da69-4602-9637-48b2a955a0aa") },
                        new { Id = 2, CreatedDate = new DateTime(2018, 11, 23, 19, 56, 11, 483, DateTimeKind.Local), Deleted = false, ModifiedDate = new DateTime(2018, 11, 23, 19, 56, 11, 483, DateTimeKind.Local), SaleId = 2, ShipToName = "Gau Gau", ShipToPhone = "094464467", UniqueId = new Guid("57539299-f28a-4be3-ac95-f153b10ce24a") }
                    );
                });

            modelBuilder.Entity("ComiShop.SaleOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("OrderStatus");

                    b.Property<bool>("Payment");

                    b.Property<DateTime?>("ShippedDate")
                        .HasColumnType("date");

                    b.Property<int>("ShipperId");

                    b.Property<double>("TotalPrice");

                    b.Property<Guid>("UniqueId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("SaleOrder");

                    b.HasData(
                        new { Id = 1, CreatedDate = new DateTime(2018, 11, 23, 19, 56, 11, 483, DateTimeKind.Local), Deleted = false, ModifiedDate = new DateTime(2018, 11, 23, 19, 56, 11, 483, DateTimeKind.Local), Payment = false, ShipperId = 1, TotalPrice = 50.0, UniqueId = new Guid("6e1bd23a-0057-45c1-abbe-c9f36ba525c0"), UserId = "a18be9c0-aa65-4af8-bd17-00bd9344e575" },
                        new { Id = 2, CreatedDate = new DateTime(2018, 11, 23, 19, 56, 11, 483, DateTimeKind.Local), Deleted = false, ModifiedDate = new DateTime(2018, 11, 23, 19, 56, 11, 483, DateTimeKind.Local), Payment = false, ShipperId = 1, TotalPrice = 120.0, UniqueId = new Guid("229470d2-f6c7-44f9-a847-027206abbc4f"), UserId = "a18be9c0-aa65-4af8-bd17-00bd9344e575" }
                    );
                });

            modelBuilder.Entity("ComiShop.SaleOrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("Deleted");

                    b.Property<int?>("Discount");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int>("ProductId");

                    b.Property<int>("Quantity");

                    b.Property<int>("SaleOrderId");

                    b.Property<Guid>("UniqueId");

                    b.Property<double>("UnitPrice");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SaleOrderId");

                    b.ToTable("SaleOrderDetail");

                    b.HasData(
                        new { Id = 1, CreatedDate = new DateTime(2018, 11, 23, 19, 56, 11, 483, DateTimeKind.Local), Deleted = false, ModifiedDate = new DateTime(2018, 11, 23, 19, 56, 11, 483, DateTimeKind.Local), ProductId = 1, Quantity = 1, SaleOrderId = 1, UniqueId = new Guid("2866d1fd-857f-4e1c-a267-c4868c40485f"), UnitPrice = 50.0 },
                        new { Id = 2, CreatedDate = new DateTime(2018, 11, 23, 19, 56, 11, 483, DateTimeKind.Local), Deleted = false, ModifiedDate = new DateTime(2018, 11, 23, 19, 56, 11, 483, DateTimeKind.Local), ProductId = 3, Quantity = 2, SaleOrderId = 2, UniqueId = new Guid("f003a25f-acf4-4709-8f27-5fa0b1d823a0"), UnitPrice = 60.0 }
                    );
                });

            modelBuilder.Entity("ComiShop.Shipper", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Company");

                    b.Property<string>("ContactName");

                    b.Property<string>("ContactPhone");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<Guid>("UniqueId");

                    b.HasKey("Id");

                    b.ToTable("Shipper");

                    b.HasData(
                        new { Id = 1, ContactName = "Anga", ContactPhone = "094123321", CreatedDate = new DateTime(2018, 11, 23, 19, 56, 11, 482, DateTimeKind.Local), Deleted = false, ModifiedDate = new DateTime(2018, 11, 23, 19, 56, 11, 482, DateTimeKind.Local), UniqueId = new Guid("9b8be668-ae0f-4697-94e7-609f6ba5826f") },
                        new { Id = 2, ContactName = "Husky", ContactPhone = "037864457", CreatedDate = new DateTime(2018, 11, 23, 19, 56, 11, 482, DateTimeKind.Local), Deleted = false, ModifiedDate = new DateTime(2018, 11, 23, 19, 56, 11, 482, DateTimeKind.Local), UniqueId = new Guid("b80b5784-ea35-4170-980b-a8ba7cfb8df0") }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new { UserId = "a18be9c0-aa65-4af8-bd17-00bd9344e575", RoleId = "a18be9c0-aa65-4af8-bd17-00bd9344e575" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ComiShop.Data.Entities.Comment", b =>
                {
                    b.HasOne("ComiShop.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Comments")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("ComiShop.Product", "Product")
                        .WithMany("Comments")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ComiShop.PersonInfo", b =>
                {
                    b.HasOne("ComiShop.Models.ApplicationUser", "User")
                        .WithOne("PersonInfo")
                        .HasForeignKey("ComiShop.PersonInfo", "UserId");
                });

            modelBuilder.Entity("ComiShop.Product", b =>
                {
                    b.HasOne("ComiShop.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ComiShop.ProductDetail", b =>
                {
                    b.HasOne("ComiShop.Product", "Product")
                        .WithMany("ProductDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ComiShop.ReceiveProduct", b =>
                {
                    b.HasOne("ComiShop.SaleOrder", "SaleOrder")
                        .WithMany()
                        .HasForeignKey("SaleOrderId");
                });

            modelBuilder.Entity("ComiShop.SaleOrder", b =>
                {
                    b.HasOne("ComiShop.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("SaleOrders")
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("ComiShop.SaleOrderDetail", b =>
                {
                    b.HasOne("ComiShop.Product", "Product")
                        .WithMany("SaleOrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ComiShop.SaleOrder", "SaleOrder")
                        .WithMany("SaleOrderDetails")
                        .HasForeignKey("SaleOrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("ComiShop.Models.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ComiShop.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ComiShop.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("ComiShop.Models.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ComiShop.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ComiShop.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
